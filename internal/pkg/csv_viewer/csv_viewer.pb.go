// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: csv_viewer.proto

package csv_viewer

import (
	"context"
	"reflect"
	"sync"

	"github.com/golang/protobuf/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// FileQuery is a message with file identifiers to get details about CSV file from server.
type FileQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the CSV file.
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
}

func (x *FileQuery) Reset() {
	*x = FileQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csv_viewer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileQuery) ProtoMessage() {}

func (x *FileQuery) ProtoReflect() protoreflect.Message {
	mi := &file_csv_viewer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileQuery.ProtoReflect.Descriptor instead.
func (*FileQuery) Descriptor() ([]byte, []int) {
	return file_csv_viewer_proto_rawDescGZIP(), []int{0}
}

func (x *FileQuery) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// FileDetails is a message sent to get CSV file details.
type FileDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the CSV file.
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// The earliest date available in the original values list.
	StartDate int64 `protobuf:"varint,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// The latest date available in the original values list.
	StopDate int64 `protobuf:"varint,3,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
}

func (x *FileDetails) Reset() {
	*x = FileDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csv_viewer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileDetails) ProtoMessage() {}

func (x *FileDetails) ProtoReflect() protoreflect.Message {
	mi := &file_csv_viewer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileDetails.ProtoReflect.Descriptor instead.
func (*FileDetails) Descriptor() ([]byte, []int) {
	return file_csv_viewer_proto_rawDescGZIP(), []int{1}
}

func (x *FileDetails) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileDetails) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *FileDetails) GetStopDate() int64 {
	if x != nil {
		return x.StopDate
	}
	return 0
}

// TimeRange is a message sent to get time series values.
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of CSV file.
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// The start date of the interval for values gathering.
	StartDate int64 `protobuf:"varint,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// The stop date of the interval for values gathering.
	StopDate int64 `protobuf:"varint,3,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csv_viewer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_csv_viewer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_csv_viewer_proto_rawDescGZIP(), []int{2}
}

func (x *Filter) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Filter) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *Filter) GetStopDate() int64 {
	if x != nil {
		return x.StopDate
	}
	return 0
}

// Value is a message sent in response for TimeSeries.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The certain date when value was gathered.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// The gathered value.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_csv_viewer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_csv_viewer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_csv_viewer_proto_rawDescGZIP(), []int{3}
}

func (x *Value) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *Value) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_csv_viewer_proto protoreflect.FileDescriptor

var file_csv_viewer_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x73, 0x76, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x73, 0x76, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x22, 0x27,
	0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x44, 0x61, 0x74, 0x65, 0x22, 0x31, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32,
	0x88, 0x01, 0x0a, 0x09, 0x43, 0x53, 0x56, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x63, 0x73,
	0x76, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x11, 0x2e, 0x63, 0x73, 0x76, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x15, 0x2e, 0x63, 0x73, 0x76, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a,
	0x17, 0x2e, 0x63, 0x73, 0x76, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x42, 0x6b, 0x0a, 0x1a, 0x69, 0x6f,
	0x2e, 0x74, 0x6f, 0x6f, 0x72, 0x6f, 0x73, 0x61, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x73, 0x76, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x42, 0x0e, 0x43, 0x53, 0x56, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f, 0x6f, 0x72, 0x6f, 0x73, 0x61, 0x6e, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2d, 0x63, 0x73, 0x76, 0x2d, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x73, 0x76,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_csv_viewer_proto_rawDescOnce sync.Once
	file_csv_viewer_proto_rawDescData = file_csv_viewer_proto_rawDesc
)

func file_csv_viewer_proto_rawDescGZIP() []byte {
	file_csv_viewer_proto_rawDescOnce.Do(func() {
		file_csv_viewer_proto_rawDescData = protoimpl.X.CompressGZIP(file_csv_viewer_proto_rawDescData)
	})
	return file_csv_viewer_proto_rawDescData
}

var file_csv_viewer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_csv_viewer_proto_goTypes = []interface{}{
	(*FileQuery)(nil),   // 0: csv_viewer.FileQuery
	(*FileDetails)(nil), // 1: csv_viewer.FileDetails
	(*Filter)(nil),      // 2: csv_viewer.Filter
	(*Value)(nil),       // 3: csv_viewer.Value
}
var file_csv_viewer_proto_depIdxs = []int32{
	2, // 0: csv_viewer.CSVViewer.ListValues:input_type -> csv_viewer.Filter
	0, // 1: csv_viewer.CSVViewer.GetFileDetails:input_type -> csv_viewer.FileQuery
	3, // 2: csv_viewer.CSVViewer.ListValues:output_type -> csv_viewer.Value
	1, // 3: csv_viewer.CSVViewer.GetFileDetails:output_type -> csv_viewer.FileDetails
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_csv_viewer_proto_init() }
func file_csv_viewer_proto_init() {
	if File_csv_viewer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_csv_viewer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csv_viewer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csv_viewer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_csv_viewer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_csv_viewer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_csv_viewer_proto_goTypes,
		DependencyIndexes: file_csv_viewer_proto_depIdxs,
		MessageInfos:      file_csv_viewer_proto_msgTypes,
	}.Build()
	File_csv_viewer_proto = out.File
	file_csv_viewer_proto_rawDesc = nil
	file_csv_viewer_proto_goTypes = nil
	file_csv_viewer_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CSVViewerClient is the client API for CSVViewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSVViewerClient interface {
	// Obtains the Values from CSV file by name within the given TimeRange.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListValues(ctx context.Context, in *Filter, opts ...grpc.CallOption) (CSVViewer_ListValuesClient, error)
	// Obtains FileDetails for the file by FileQuery.
	GetFileDetails(ctx context.Context, in *FileQuery, opts ...grpc.CallOption) (*FileDetails, error)
}

type cSVViewerClient struct {
	cc grpc.ClientConnInterface
}

func NewCSVViewerClient(cc grpc.ClientConnInterface) CSVViewerClient {
	return &cSVViewerClient{cc}
}

func (c *cSVViewerClient) ListValues(ctx context.Context, in *Filter, opts ...grpc.CallOption) (CSVViewer_ListValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CSVViewer_serviceDesc.Streams[0], "/csv_viewer.CSVViewer/ListValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSVViewerListValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CSVViewer_ListValuesClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type cSVViewerListValuesClient struct {
	grpc.ClientStream
}

func (x *cSVViewerListValuesClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cSVViewerClient) GetFileDetails(ctx context.Context, in *FileQuery, opts ...grpc.CallOption) (*FileDetails, error) {
	out := new(FileDetails)
	err := c.cc.Invoke(ctx, "/csv_viewer.CSVViewer/GetFileDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSVViewerServer is the server API for CSVViewer service.
type CSVViewerServer interface {
	// Obtains the Values from CSV file by name within the given TimeRange.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListValues(*Filter, CSVViewer_ListValuesServer) error
	// Obtains FileDetails for the file by FileQuery.
	GetFileDetails(context.Context, *FileQuery) (*FileDetails, error)
}

// UnimplementedCSVViewerServer can be embedded to have forward compatible implementations.
type UnimplementedCSVViewerServer struct {
}

func (*UnimplementedCSVViewerServer) ListValues(*Filter, CSVViewer_ListValuesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListValues not implemented")
}
func (*UnimplementedCSVViewerServer) GetFileDetails(context.Context, *FileQuery) (*FileDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetails not implemented")
}

func RegisterCSVViewerServer(s *grpc.Server, srv CSVViewerServer) {
	s.RegisterService(&_CSVViewer_serviceDesc, srv)
}

func _CSVViewer_ListValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CSVViewerServer).ListValues(m, &cSVViewerListValuesServer{stream})
}

type CSVViewer_ListValuesServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type cSVViewerListValuesServer struct {
	grpc.ServerStream
}

func (x *cSVViewerListValuesServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func _CSVViewer_GetFileDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVViewerServer).GetFileDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csv_viewer.CSVViewer/GetFileDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVViewerServer).GetFileDetails(ctx, req.(*FileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSVViewer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csv_viewer.CSVViewer",
	HandlerType: (*CSVViewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileDetails",
			Handler:    _CSVViewer_GetFileDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListValues",
			Handler:       _CSVViewer_ListValues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "csv_viewer.proto",
}
