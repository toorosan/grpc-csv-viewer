// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/pkg/csvviewer/csv_viewer.proto

package csvviewer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// FilesQuery is a message with to get list of available CSV files.
type FilesQuery struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FilesQuery) Reset()         { *m = FilesQuery{} }
func (m *FilesQuery) String() string { return proto.CompactTextString(m) }
func (*FilesQuery) ProtoMessage()    {}
func (*FilesQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e35d1bef0b2bd7, []int{0}
}

func (m *FilesQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilesQuery.Unmarshal(m, b)
}
func (m *FilesQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilesQuery.Marshal(b, m, deterministic)
}
func (m *FilesQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilesQuery.Merge(m, src)
}
func (m *FilesQuery) XXX_Size() int {
	return xxx_messageInfo_FilesQuery.Size(m)
}
func (m *FilesQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FilesQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FilesQuery proto.InternalMessageInfo

// FileQuery is a message with file identifiers to get details about certain CSV file.
type FileQuery struct {
	// The name of the CSV file. If empty, server will respond with some default file information.
	FileName             string   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileQuery) Reset()         { *m = FileQuery{} }
func (m *FileQuery) String() string { return proto.CompactTextString(m) }
func (*FileQuery) ProtoMessage()    {}
func (*FileQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e35d1bef0b2bd7, []int{1}
}

func (m *FileQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileQuery.Unmarshal(m, b)
}
func (m *FileQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileQuery.Marshal(b, m, deterministic)
}
func (m *FileQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileQuery.Merge(m, src)
}
func (m *FileQuery) XXX_Size() int {
	return xxx_messageInfo_FileQuery.Size(m)
}
func (m *FileQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FileQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FileQuery proto.InternalMessageInfo

func (m *FileQuery) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

// FileDetails is a message sent to get CSV file details.
type FileDetails struct {
	// The name of the CSV file.
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// The earliest date available in the original values list.
	StartDate int64 `protobuf:"varint,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// The latest date available in the original values list.
	StopDate             int64    `protobuf:"varint,3,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileDetails) Reset()         { *m = FileDetails{} }
func (m *FileDetails) String() string { return proto.CompactTextString(m) }
func (*FileDetails) ProtoMessage()    {}
func (*FileDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e35d1bef0b2bd7, []int{2}
}

func (m *FileDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileDetails.Unmarshal(m, b)
}
func (m *FileDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileDetails.Marshal(b, m, deterministic)
}
func (m *FileDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDetails.Merge(m, src)
}
func (m *FileDetails) XXX_Size() int {
	return xxx_messageInfo_FileDetails.Size(m)
}
func (m *FileDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDetails.DiscardUnknown(m)
}

var xxx_messageInfo_FileDetails proto.InternalMessageInfo

func (m *FileDetails) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileDetails) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *FileDetails) GetStopDate() int64 {
	if m != nil {
		return m.StopDate
	}
	return 0
}

// TimeRange is a message sent to get time series values.
type Filter struct {
	// The name of CSV file.
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// The start date of the interval for values gathering.
	StartDate int64 `protobuf:"varint,2,opt,name=startDate,proto3" json:"startDate,omitempty"`
	// The stop date of the interval for values gathering.
	StopDate             int64    `protobuf:"varint,3,opt,name=stopDate,proto3" json:"stopDate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Filter) Reset()         { *m = Filter{} }
func (m *Filter) String() string { return proto.CompactTextString(m) }
func (*Filter) ProtoMessage()    {}
func (*Filter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e35d1bef0b2bd7, []int{3}
}

func (m *Filter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Filter.Unmarshal(m, b)
}
func (m *Filter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Filter.Marshal(b, m, deterministic)
}
func (m *Filter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Filter.Merge(m, src)
}
func (m *Filter) XXX_Size() int {
	return xxx_messageInfo_Filter.Size(m)
}
func (m *Filter) XXX_DiscardUnknown() {
	xxx_messageInfo_Filter.DiscardUnknown(m)
}

var xxx_messageInfo_Filter proto.InternalMessageInfo

func (m *Filter) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *Filter) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *Filter) GetStopDate() int64 {
	if m != nil {
		return m.StopDate
	}
	return 0
}

// Value is a message sent in response for TimeSeries.
type Value struct {
	// The certain date when value was gathered.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// The gathered value.
	Value                float64  `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Value) Reset()         { *m = Value{} }
func (m *Value) String() string { return proto.CompactTextString(m) }
func (*Value) ProtoMessage()    {}
func (*Value) Descriptor() ([]byte, []int) {
	return fileDescriptor_e2e35d1bef0b2bd7, []int{4}
}

func (m *Value) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Value.Unmarshal(m, b)
}
func (m *Value) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Value.Marshal(b, m, deterministic)
}
func (m *Value) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Value.Merge(m, src)
}
func (m *Value) XXX_Size() int {
	return xxx_messageInfo_Value.Size(m)
}
func (m *Value) XXX_DiscardUnknown() {
	xxx_messageInfo_Value.DiscardUnknown(m)
}

var xxx_messageInfo_Value proto.InternalMessageInfo

func (m *Value) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Value) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*FilesQuery)(nil), "csv_viewer.FilesQuery")
	proto.RegisterType((*FileQuery)(nil), "csv_viewer.FileQuery")
	proto.RegisterType((*FileDetails)(nil), "csv_viewer.FileDetails")
	proto.RegisterType((*Filter)(nil), "csv_viewer.Filter")
	proto.RegisterType((*Value)(nil), "csv_viewer.Value")
}

func init() {
	proto.RegisterFile("internal/pkg/csvviewer/csv_viewer.proto", fileDescriptor_e2e35d1bef0b2bd7)
}

var fileDescriptor_e2e35d1bef0b2bd7 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x3d, 0x4f, 0x32, 0x41,
	0x10, 0x7e, 0xf7, 0x45, 0x88, 0x37, 0x18, 0x12, 0x37, 0x7e, 0x90, 0x8b, 0x05, 0xb9, 0x06, 0xaa,
	0xc5, 0x8f, 0xc2, 0x82, 0xc6, 0x20, 0xc1, 0xc6, 0x18, 0xc4, 0x84, 0xc2, 0x42, 0xb3, 0xe2, 0x48,
	0x36, 0xae, 0xec, 0x65, 0x77, 0xc0, 0xf8, 0x17, 0xfd, 0x55, 0x66, 0x07, 0x73, 0x90, 0x2b, 0xb4,
	0xb2, 0x9b, 0xe7, 0x63, 0x66, 0xee, 0x9e, 0x1d, 0x68, 0x9b, 0x39, 0xa1, 0x9f, 0x6b, 0xdb, 0xcd,
	0x5f, 0x67, 0xdd, 0x69, 0x58, 0x2e, 0x0d, 0xbe, 0xa3, 0x8f, 0xd5, 0xe3, 0xaa, 0x54, 0xb9, 0x77,
	0xe4, 0x24, 0xac, 0x99, 0x6c, 0x07, 0x60, 0x68, 0x2c, 0x86, 0xdb, 0x05, 0xfa, 0x8f, 0xac, 0x0d,
	0x49, 0x44, 0x0c, 0x64, 0x0a, 0xdb, 0x2f, 0xc6, 0xe2, 0x8d, 0x7e, 0xc3, 0xa6, 0x68, 0x89, 0x4e,
	0x32, 0x2e, 0x70, 0x36, 0x85, 0x7a, 0x34, 0x0e, 0x90, 0xb4, 0xb1, 0xe1, 0x27, 0xab, 0x3c, 0x82,
	0x24, 0x90, 0xf6, 0x34, 0xd0, 0x84, 0xcd, 0xff, 0x2d, 0xd1, 0xa9, 0x8c, 0xd7, 0x44, 0xec, 0x0c,
	0xe4, 0x72, 0x16, 0x2b, 0x2c, 0x16, 0x38, 0x7b, 0x80, 0xda, 0xd0, 0x58, 0x42, 0xff, 0x47, 0xf3,
	0x4f, 0xa0, 0x3a, 0xd1, 0x76, 0x81, 0x52, 0xc2, 0xd6, 0x73, 0x34, 0x08, 0x36, 0x70, 0x2d, 0xf7,
	0xa0, 0xba, 0x8c, 0x22, 0x8f, 0x14, 0xe3, 0x15, 0x38, 0xfd, 0x14, 0x90, 0x5c, 0xde, 0x4d, 0x26,
	0x1c, 0x9e, 0xbc, 0x80, 0xe4, 0xda, 0x04, 0xe2, 0x00, 0xe5, 0x81, 0xda, 0x08, 0x7a, 0x9d, 0x69,
	0x7a, 0x58, 0xe6, 0xbf, 0x43, 0xcb, 0xfe, 0x1d, 0x0b, 0x79, 0x0e, 0x10, 0x27, 0xf0, 0x67, 0x04,
	0x29, 0x4b, 0x56, 0x42, 0x9f, 0xee, 0x6e, 0x72, 0xec, 0xe3, 0xc6, 0x3e, 0x34, 0xae, 0x90, 0x36,
	0xdf, 0x60, 0xbf, 0xbc, 0xe7, 0xb7, 0xf5, 0xfd, 0x1e, 0xa4, 0xc6, 0x29, 0x72, 0xce, 0xbb, 0xa0,
	0xe7, 0x6a, 0xe6, 0xf3, 0xa9, 0x2a, 0xce, 0xa6, 0xdf, 0x28, 0xfe, 0x73, 0x14, 0xaf, 0x66, 0x24,
	0xee, 0xeb, 0xaa, 0x57, 0xc8, 0x4f, 0x35, 0xbe, 0xa5, 0xb3, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd0, 0x77, 0x65, 0x6f, 0x76, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CSVViewerClient is the client API for CSVViewer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CSVViewerClient interface {
	// Obtains the list of available CSV file names.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListFiles(ctx context.Context, in *FilesQuery, opts ...grpc.CallOption) (CSVViewer_ListFilesClient, error)
	// Obtains the Values from CSV file by name within the given TimeRange.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListValues(ctx context.Context, in *Filter, opts ...grpc.CallOption) (CSVViewer_ListValuesClient, error)
	// Obtains FileDetails for the file by FileQuery.
	GetFileDetails(ctx context.Context, in *FileQuery, opts ...grpc.CallOption) (*FileDetails, error)
}

type cSVViewerClient struct {
	cc grpc.ClientConnInterface
}

func NewCSVViewerClient(cc grpc.ClientConnInterface) CSVViewerClient {
	return &cSVViewerClient{cc}
}

func (c *cSVViewerClient) ListFiles(ctx context.Context, in *FilesQuery, opts ...grpc.CallOption) (CSVViewer_ListFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CSVViewer_serviceDesc.Streams[0], "/csv_viewer.CSVViewer/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSVViewerListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CSVViewer_ListFilesClient interface {
	Recv() (*FileDetails, error)
	grpc.ClientStream
}

type cSVViewerListFilesClient struct {
	grpc.ClientStream
}

func (x *cSVViewerListFilesClient) Recv() (*FileDetails, error) {
	m := new(FileDetails)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cSVViewerClient) ListValues(ctx context.Context, in *Filter, opts ...grpc.CallOption) (CSVViewer_ListValuesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CSVViewer_serviceDesc.Streams[1], "/csv_viewer.CSVViewer/ListValues", opts...)
	if err != nil {
		return nil, err
	}
	x := &cSVViewerListValuesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CSVViewer_ListValuesClient interface {
	Recv() (*Value, error)
	grpc.ClientStream
}

type cSVViewerListValuesClient struct {
	grpc.ClientStream
}

func (x *cSVViewerListValuesClient) Recv() (*Value, error) {
	m := new(Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cSVViewerClient) GetFileDetails(ctx context.Context, in *FileQuery, opts ...grpc.CallOption) (*FileDetails, error) {
	out := new(FileDetails)
	err := c.cc.Invoke(ctx, "/csv_viewer.CSVViewer/GetFileDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSVViewerServer is the server API for CSVViewer service.
type CSVViewerServer interface {
	// Obtains the list of available CSV file names.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListFiles(*FilesQuery, CSVViewer_ListFilesServer) error
	// Obtains the Values from CSV file by name within the given TimeRange.  Results are
	// streamed rather than returned at once (e.g. in a response message with a
	// repeated field), as the time range may cover a huge time frame and contain a
	// huge number of values.
	ListValues(*Filter, CSVViewer_ListValuesServer) error
	// Obtains FileDetails for the file by FileQuery.
	GetFileDetails(context.Context, *FileQuery) (*FileDetails, error)
}

// UnimplementedCSVViewerServer can be embedded to have forward compatible implementations.
type UnimplementedCSVViewerServer struct {
}

func (*UnimplementedCSVViewerServer) ListFiles(req *FilesQuery, srv CSVViewer_ListFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (*UnimplementedCSVViewerServer) ListValues(req *Filter, srv CSVViewer_ListValuesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListValues not implemented")
}
func (*UnimplementedCSVViewerServer) GetFileDetails(ctx context.Context, req *FileQuery) (*FileDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDetails not implemented")
}

func RegisterCSVViewerServer(s *grpc.Server, srv CSVViewerServer) {
	s.RegisterService(&_CSVViewer_serviceDesc, srv)
}

func _CSVViewer_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CSVViewerServer).ListFiles(m, &cSVViewerListFilesServer{stream})
}

type CSVViewer_ListFilesServer interface {
	Send(*FileDetails) error
	grpc.ServerStream
}

type cSVViewerListFilesServer struct {
	grpc.ServerStream
}

func (x *cSVViewerListFilesServer) Send(m *FileDetails) error {
	return x.ServerStream.SendMsg(m)
}

func _CSVViewer_ListValues_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Filter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CSVViewerServer).ListValues(m, &cSVViewerListValuesServer{stream})
}

type CSVViewer_ListValuesServer interface {
	Send(*Value) error
	grpc.ServerStream
}

type cSVViewerListValuesServer struct {
	grpc.ServerStream
}

func (x *cSVViewerListValuesServer) Send(m *Value) error {
	return x.ServerStream.SendMsg(m)
}

func _CSVViewer_GetFileDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSVViewerServer).GetFileDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csv_viewer.CSVViewer/GetFileDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSVViewerServer).GetFileDetails(ctx, req.(*FileQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _CSVViewer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csv_viewer.CSVViewer",
	HandlerType: (*CSVViewerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileDetails",
			Handler:    _CSVViewer_GetFileDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFiles",
			Handler:       _CSVViewer_ListFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListValues",
			Handler:       _CSVViewer_ListValues_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pkg/csvviewer/csv_viewer.proto",
}
